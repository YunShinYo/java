//반환형 함수명(매개변수){}
//자료형
public class Ex_method {
	//static 반환형 함수명(매개변수)
	//void -> 리턴값이 필요없다
	/*static void pro(int age) {
		System.out.println("안녕");
		System.out.println("나이는 "+age+"이다");
		
		 //return;(x)->안함
		//반환형이 void인 함수는 대부분 출력문이 들어간다. -> 80%이상
		//왜냐하면 내가 얻을게 없기 때문이다.
	}
	static double area(double r) {
		return 3.14*r*r;
	}
	static double round(double r) {
		return 3.14*r*2;
	}
	
	static void meter(int n) {
		System.out.println(n/100.0);
	}*/
	static double meter(int n) {
		return n/100.0;
	}
	public static void main(String[] args) {
		// main 메소드는 하나의 클래스파일 안에 하나만 존재한다
		// public은 접근제한자로 외부에서 접근이 가능하도록 공개해놓는 기능을 한다.
		// static 공유해준다
		// static을 안붙여주면 main메소드에서 pro()함수를 사용할 수 없다. 따로따로임
		// void 텅빈값(리턴값)

		// 메소드는 반드시 클래스 안에 있어야함(캡슐화 원칙)
		/*
		System.out.println("시작");	//main() 메소드
		pro(2); // pro()함수호출 ->함수를 찾아 {}확인, ({}중괄호:정의부분)
		pro(53); // pro()함수호출
		System.out.println("끝");
		
		System.out.printf("원의 넓이: %.2f", area(5.5));	//함수 출력과 동시에 출력함
		System.out.printf("원의 둘레: %.2f", round(3.2));	//함수 출력과 동시에 출력함
		//넓이:3.14*반지름*반지름
		//둘레:3.14*반지름*2
		
		meter(176);	//함수호출
		//1.76
		 */
		System.out.println(meter(176));
		//함수호출과 동시에 출력
		}
	

	// main메소드는 자동으로 시작
	// 함수는 일종의 모듈화작업이다(모듈화란 pro 함수, main 메소드.. 따로따로 기능을 구현하는 것이다)
						  // 모듈화는 일종의 부품이다

	// 함수선언과 정의
	// 함수호출(=부른다)

	// =>함수는 호출을 안하면 실행이 안된다. -> (정의 부분) 실행이 안된다.
	// 실행이라는 것은 정의부분이 실행이 된다는 뜻이다
}

//함수 설명(출력을 어디에 할건지 먼저)
//1. 출력을 어디에서 할건지
//2. main에서 할거면 함수에서 리턴
//->함수호출과 동시에 출력
//->변수를 주면서 리턴값을 저장할 것인지

//2.1 함수에서 할거면 리턴문 필요없음
//(void)
