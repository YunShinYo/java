import java.util.LinkedList;
import java.util.Scanner;

//Thread 상속받는 방법
//1. extends Thread
//2. implements Runnable
/*
 interface Cal{
	int total(int a, int b);	//a부터 b까지의 합 리턴
	int big(int a, int b);
}
class Calcu implements Cal{
	@Override
	public int total(int a, int b) {	//a,b중 큰 값 리턴
		int sum=0;
		for(int i=a; i<=b;i++) {
			sum+=i;
		}
		return sum;
	}
	@Override
	public int big(int a, int b) {	
		return a>b?a:b;	//삼항 연산자 사용★
	}
}

class Th implements Runnable{	//다중 상속 받을 떄 주로 사용
	//쓰레드 객체로 바로 start함수에 접근 불가능★
	String str;
	Th(String str){
		this.str=str;
	}
	public void run() {
		System.out.println(str);
	}
}

class Timer extends Thread{		
	//쓰레드 객체로 바로 start함수에 접근 가능★
	public void run() {
		for(int i=0; i<11; i++) {
			System.out.println(i);
			try {
				sleep(1000);
			}
			catch(Exception e) {}
		}
	}
}

class Total{
	int sum;
	Total(){
		sum=0; 
	}
	void total(int n){
		sum+=n; 
	}
	int get(){
	  return sum; 
	  }
}

class AThread extends Thread{
	Total t;
	int a, b;
	AThread(Total t, int a, int b){
		this.t=t;
		this.a=a;
		this.b=b;
	}
	
	public void run() {
		for(int i=a; i<=b; i++) {
			t.total(i);	//sum+=i
		}
		System.out.println("합: "+t.get());
	}
}

interface Figure{
	public void circle_area();
	public void rec_area();
}
class Rec implements Figure{
	int a, b;
	Rec(int a,int b){
		this.a=a;
		this.b=b;
	}
	@Override
	public void circle_area() {
		
	}
	@Override
	public void rec_area() {
		System.out.println(a*b);
	}
}
class Circle implements Figure{
	int r;
	Circle(int r){
		this.r=r;
	}
	@Override
	public void circle_area() {
		System.out.println(3.14*r*r);
	}
	@Override
	public void rec_area() {
		
	}
}
*/
public class test_1209_1 {
	public static void main(String[] args) {
/*
		//1.	Interface를 상속받은 Calcu클래스를 작성해라. Main()에서 a,b에 대해 적절한 값을 설정해라.
		// interface Cal{
		// int total(int a, int b); //a부터 b까지의 합 리턴
		// int big(int a, int b);} //a,b중 큰 값 리턴
		Cal c=new Calcu();	//부모=자식!!!
		System.out.println(c.total(1, 10));
		System.out.println(c.big(4, 6));

		//2.	Main()를 보고 “쓰레드1”을 출력해라.
		//Main(){
		// Th t=new Th(“쓰레드 1”);
		// Thread th=new Thread(t);
		// th.start(); 
		Th t=new Th("쓰레드 1");
		Thread th=new Thread(t);
		th.start();

		//3.	Main()를 보고 클래스 작성해라. (0~10까지 1초동안 잠을 잔 후 깨워라) 
		//Main(){
		//   Timer t = new Timer();
		//   t.start(); }
		Timer timer=new Timer();
		timer.start();

		//4.	다음 코드를 보고 AThread클래스를 작성해라. (1부터 100까지 합 출력)
		//두 쓰레드가 충돌하지 않게 join()도 활용해라.
		//class Total{
		//int sum;
		//Total(){
		//   sum=0; }
		//void total(int n){
		//  sum+=n; }
		//int get(){
		//  return sum; }
		//}
		//main(){
		// Total t=new Total();
		// AThread a=new AThread(t, 1, 50);
		// AThread b=new AThread(t, 51, 100);
		// a.start(); b.start(); }
		Total total=new Total();
		AThread a=new AThread(total, 1, 50);
		AThread b=new AThread(total, 51, 100);
			a.start(); 
		try {
			a.join();
		} catch (InterruptedException e) {}
			b.start();
		try {
			b.join();
		} catch (InterruptedException e) {}

		//5.	main()에 이렇게 주고, Figure인터페이스 만들어 circle_area()에는 원면적, 
		//rec_area()에는 사각형 면적 출력해라.
		//Figure f1=new Circle(5);
		//Figure f2=new Rec(2,5); 
		//f1.circle_area(); 
		//f2.rec_area();
		
		Figure f1=new Circle(5);
		Figure f2=new Rec(2,5);
		f1.circle_area();
		f2.rec_area();
*/
	}
}
