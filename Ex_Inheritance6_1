/*
class A{
	//A(){
	//	System.out.println("A");
	//}
	//기본 생성자가 자동으로 생김(일종의 암묵적 생성)
}
class B extends A{
	B(){
		System.out.println("B");
	}
}
public class Ex_Inheritance6 {
	public static void main(String[] args) {
		//상속의 필요성
		//       사람(공부하기, 가르치기, 잠자기, 먹기)
		//학생 직장인 연구가 교수
		//extends라는 키워드/*
class A{
	//A(){
	//	System.out.println("A");
	//}
	//기본 생성자가 자동으로 생김(일종의 암묵적 생성)
}
class B extends A{
	B(){
		System.out.println("B");
	}
}
public class Ex_Inheritance6 {
	public static void main(String[] args) {
		//상속의 필요성
		//       사람(공부하기, 가르치기, 잠자기, 먹기)
		//학생 직장인 연구가 교수
		//extends라는 키워드를 사용해서 코드를 확장한다.
		
		//자바에서 클래스 다중상속 불가능(C++은 다중상속 가능함) =>인터페이스가 있는 이유가 된다.
		//-부모클래스의 멤버에 대한 자식 클래스 접근
		//1. 부모클래스의 private멤버 ->자식클래스에서 접근(x)
		//2. 부모클래스의 디폴트 멤버   ->자식클래스에서 접근(o), 동일한 패키지에 있을때
		//3. 부모클래스의 public멤버  ->자식 클래스에서 항상접근(o)
		//4. 부모클래스의 protected멤버->패키지 여부와 상관없이 자식 클래스에서 접근(o), 같은 패키지 내의 모든 클래스 접근 허용
		
		//super(parameter) : 자식 클래스에서 명시적으로 부모 클래스의 생성자 선택해서 호출한다.
		 					 가장 첫 라인에 와야함
		
		B b=new B();	//출력-> A B
	}
}
*/를 사용해서 코드를 확장한다.
		
		//자바에서 클래스 다중상속 불가능(C++은 다중상속 가능함) =>인터페이스가 있는 이유가 된다.
		//-부모클래스의 멤버에 대한 자식 클래스 접근
		//1. 부모클래스의 private멤버 ->자식클래스에서 접근(x)
		//2. 부모클래스의 디폴트 멤버   ->자식클래스에서 접근(o), 동일한 패키지에 있을때
		//3. 부모클래스의 public멤버  ->자식 클래스에서 항상접근(o)
		//4. 부모클래스의 protected멤버->패키지 여부와 상관없이 자식 클래스에서 접근(o), 같은 패키지 내의 모든 클래스 접근 허용
		
		//super(parameter) : 자식 클래스에서 명시적으로 부모 클래스의 생성자 선택해서 호출한다.
		 					 가장 첫 라인에 와야함
		
		B b=new B();	//출력-> A B
	}
}
*/
