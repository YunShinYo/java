
public class Ex_Generic3 {
public static void main(String[] args) {
	//제네릭의 장점
	//1. 유연성 해치지 않으며 개발 시 다운캐스팅 불필요
	//2. 컴파일 할때 타입이 결정되기 때문에 보다 안전한 프로그래밍 가능
	//3. 런타임 타입 충돌 방지
	
	//1)제네릭 클래스
	//public class A <T>[] {
	//	T val;
	//	void set(T a) {val=a};
	//	T get() {return val;};
	//}
	
	//2)제네릭 메소드
	//class A{
	//	static <T> void st(){..}
	//}
	
	//컬렉션 프레임워크 - 일종의 컨테이너
	//컬렉션 개념
	//-가변 개수의 객체들의 저장소(고정x)
	//-요소의 개수에 따라 크기가 가변적으로 변경됨
	
	//배열 : 고정 크기 이상의 객체 관리 불가능
	//컬렉션 : 가변 크기이므로 객체 개수를 염려할 필요 없음
	//		(다양한 객체들의 삽입, 삭제, 검색 관리 용이)
	//컬렉션 자체가 제네릭 기법으로 구현이 되어있다
	//1) List : ArrayList, Vector -> 차이점(스레드는 동기화가 안됨), LinkedList, Stack...
	//2) Set : 
 	//3) Map : 
			
}
}
