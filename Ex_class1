	//접근제한자 : 클래스앞에 적는 접근을 제한하는 클래스 접근 권한
	//1. public	:공개(패키지가 달라도 공개)
	//2. private :비공개
	//3. default :공개는 공개인데 패키지가 다르면 비공개
	//4. protected
class Profile{
//public class Profile{//안됨
//default class Profile{//안됨
//private class Profile{//됨(접근이 안됨)
	public int age;
	public String name;
	//private int age;
	//private String name;	//private: 은닉화(정보를 공개를 안하는거)
	//int age;
	//String name;  //필드, 멤버변수...
	
	void show() {	//메소드
		System.out.println(age+" "+name);
	}
}
public class Ex_class_1 {	//->public은 하나의 소스파일에 하나만 있을 수 있다.
	public static void main(String[] args) {
		//친구 생일
		//절차지향언어와 같다.
		//1. 식당을 예약한다.
		//1.1 친구 선물을 산다.
		//2. 친구를 약속잡는다.
		//3. 선물을 꺼낸다.
			
		//----------------
				
		//객체지향언어와 같다.
		//1. 이벤트 회사에 전화함
		
		//상속,다형성,객체,캡슐화등 소프트웨어 재사용을 위한 여러 장치 내장
		//재사용과 부분 수정을 통해 소프트웨어를 다시 만드는 부담을 대폭 줄임
		//실세계에 대한 쉬운 모델링
		//과거 - 절차가 중요(c)
		//현재 - 실세계에서 발생하는 일을 프로그래밍(일과 관련된 객체들의 상호작용으로 묘사하는 것이 용이)
		//예) java, c++, python 등등
		
		//1. 객체지향의 특성 : 캡슐화
		//메소드(함수)와 데이터를 클래스 내에 선언하고 구현
		//외부에서는 공개된 메소드(public)의 인터페이스만 접근 가능
		//-외부에서는 비공개 데이터(private)에 직접 접근하거나 메소드의 구현 세부를 알수 없음
		//객체 내 데이터에 대한 보안, 보호, 외부 접근 제한
		
		//2. 객체지향의 트성 : 상속(부모, 자식 클래스)
		//유전적 상속 관계 표현
		//상위 클래스의 특성을 하위 클래스가 물려받음
		
		//3. 객체 지향의 특성 : 다형성
		//동일한 이름의 기능이 서로 다르게 작동하는 현상
		//슈퍼클래스:동물(소리내기), 서브클래스:강아지, 고양이, 닭..
		
		//4. 객체 지향의 특성 : 캡슐화
		
		//5. 객체 지향의 특성 : 상속
		
		//클래스 : 객체를 만들기 위한 일종의 설계도(class)
		//객체 : 클래스의 틀로 찍어낸 실체(변수(=필드)와 함수(=메소드))
		//-메모리 공간을 갖는 구체적인 실체
		//-클래스를 구체화한 객체를 인스턴스라고 부름
		//-객체와 인스턴스는 같은 뜻으로 사용
		
		//class Profile에 대한 객체를 생성하겠다
		Profile p1=new Profile();//객체 p1 -> 변수 선언,생성하는것
		
		p1.age=22;//객체의 멤버변수를 사용하겠다
		p1.name="user";	//필드 초기화

		p1.show();	//함수호출
		
		
	}
}
