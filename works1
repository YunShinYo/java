12월10일23:59까지 제출(이름 : 윤신요)

import java.util.ArrayList;
import java.util.Scanner;

public class test1 {

public static void main(String[] args) {
//->12월10일23:59까지제출
// p.53
//-문자형연습
public class CharacterEx1{
public static void main(String[] args) {
char ch1='A'
System.out.println(ch1);
System.out.println((int)ch1);

char ch2=66;
System.out.println(ch2);

int ch3=67;
System.out.println(ch3);
System.out.println((char)ch3);
}
}

// p.65, 68
//-묵시적형변환
public class ImplicitConversion{
public static void main(String[] args) {
byte bNum=10;
int iNum=bNum

System.out.println(bNum);
System.out.println(iNum);

int iNum2=20;
float fNum=iNum2

System.out.println(iNum);
System.out.println(fNum);

double dNum
dNum=fNum+iNum
System.out.println(dNum);
}
}

//-명시적형변환
public class ExplicitConversion{
public static void main(String[] args) {
double dNum1=1.2;
float fNum2=0.9F;

int iNum3=(int)dNum1+(int)fNum2
int iNum4=(int)(dNum1+fNum2);
System.out.println(iNum3);
System.out.println(iNum4);
}
}
// 3.
byte b=127;
int i=100;
System.out.println((byte)(b+i));
// => -29 가왜뜨는지
//명시적형변환이기때문이다..
//그이유는b는127 byte값이고i는100 int값이다.
//b+i 227이출력되고
//(byte)로명시적형변환을해주면-29값이출력된다.
//-29는에러가났다는뜻인데
//227은byte로담을수있는범위를벗어났기때문에
//에러가나서쓰레기값이나온것이라고생각합니다.

// 4.//while문을이용해숫자입력받아입력받은모든수의합을
// 출력해라.
// //0이입력되면입력이종료되고합을출력한다.
while(true) {
Scanner s=new Scanner(System.in);
int sum=0;
while(true) {
int a
a=s.nextInt();
if(a==0) {
break
}
sum+=a
}
s.close();
System.out.println("합: "+sum);
}

// p.117,121
//-중첩된반복문
public class NestedLoop{
public static void main(String[] args) {
int dan;
int times;

for(dan=2; dan<=9; dan++) {
for(times=1; times<=9; times++) {
System.out.println(dan+"X"+times+"="+dan*times);
}
System.out.println();
}
}
}

//-break문예제
public class BreakExample2{
public static void main(String[] args) {
int sum=0;
int num=0;

for(num=0; ; num++) {
sum+=num
if(sum>=100)
break
}
System.out.println("num : "+num);
System.out.println("sum : "+sum);
}
}

// p.123 문제다풀기
//-연습문제
//1)
//if-else if문
int num1 = 10;
int num2 = 2;
char operator = '+'
if (operator == '+') {
System.out.println(num1 + num2);
} else if (operator == '-') {
System.out.println(num1 - num2);
} else if (operator == '*') {
System.out.println(num1 * num2);
} else if (operator == '/') {
System.out.println(num1 / num2);
}
//switch-case문
switch (operator) {
case '+':
System.out.println(num1 + num2);
break
case '-':
System.out.println(num1 - num2);
break
case '*':
System.out.println(num1 * num2);
break
case '/':
System.out.println(num1 / num2);
break
}
//2)
for(int j=2; j<10; j++) {
if(j%2!=0) {
continue
}
for(int k=1; k<10; k++) {
System.out.println(j+"x"+k+"="+(j*k));
}
}
//3)
for (int j = 2; j < 10; j++) {
for (int k = 1; k < 10; k++) {
if (j >= k) {
System.out.println(j + "x" + k + "=" + (j * k));
}
else {
break
}
}
}
//4)
for (int j = 0; j < 4; j++) {
for (int k = 1; k < 4-j k++) {
System.out.print(" ");
}
for (int k = 0; k < (2 * j) + 1; k++) {
System.out.print(" *");
}
System.out.println();
}
// 5)
for (int j = 0; j < 7; j++) {

if (j < 4) { // 0,1,2,3
for (int k = 0; k < 3 - j k++) { // 공백
System.out.print(" ");
}
for (int k = 0; k < j + 1; k++) { // 별
System.out.print(" *");
}
for(int k=1; k<j+1; k++) {
System.out.print(" *");
}
System.out.println();
} else { // 4,5,6
for (int k = 3; k < j k++) { // 공백-> 3,2,1
System.out.print(" ");
}
for (int k = 7; k > j k--) { // 별->★
System.out.print(" *");
}
for (int k = 6; k > j k--) { // 별->★
System.out.print(" *");
}
System.out.println();
}
}

//5-1)while, break문을사용해0이입력될때까지
// 입력한숫자의개수를출력
Scanner s =new Scanner(System.in);
int cnt=0;
while(true) {
int a
a=s.nextInt();
cnt++;
if(a==0) {
break
}
}
s.close();
System.out.println("입력한숫자의개수"+ cnt);
// p.157,158
//-생성자사용하기
public class Person{
String name;
float height;
float weight;

public Person() {}
public Person(String name) {
name=pname;
}
public Person(String pname, float pheight, float pweight) {
name=pname;
height=pheight;
weight=pweight;
}
}
//-테스트클래스구현하기
public class PersonTest{
public static void main(String[] args) {
Person personKim=new Person();
personKim.name="김유신"
personKim.weight=85.5F;
personKim.height=180.0F;

Person personLee =new Person("이순신",175,75);
}
}
// p.172,173
class Person{
String name
int age
Person(){
this("이름없음", 1);
}
Person(String name, int age){
this.name=name
this.age=age
}
}
public class CallAnotherConst {

public static void main(String[] args) {
Person noName=new Person();
System.out.println(noName.name);
System.out.println(noName.age);
}
}

//-this를사용하여주소값반환하기
class Person{
String name
int age

Person(){this("이름없음", 1);}
Peroson(String name, int age){
this.name=name;
this.age=age;
}

Person returnItSelf() {
return this
}
}
public class CallAnotherConst{
public static void main(String[] args) {
Person noName=new Person();
System.out.println(noName.name);
System.out.println(noName.age);

Person p=noName.returnItSelf();
System.out.println(p);
System.out.println(noName);
}
}

// p.182,183
//-static 변수사용하기
public class Student{
public static int serialNum=1000;
public int studentID
public String studentName
public int grade
public String address

public String getStudentName() {
return studentName
}
public void setStudentName(String name) {
studentName=name
}
}
//-static 변수테스트하기
public class StudentTest1{
public static void main(String[] args) {
Student studentLee=new Student();
studentLee.setStudentName("이지원");
System.out.println(studentLee.serialNum);
studentLee.serialNum++;

Student studentSon=new Student();
studentSon.setStudentName("손수경");
System.out.println(studentSon.serialNum);
System.out.println(studentLee.serialNum);
}
}
// 6. //키보드로정수5개입력받아제일큰수출력
Scanner s = new Scanner(System.in);
int arr[] = new int[5];
int max = 0;
for (int j = 0; j < arr.length j++) {
arr[j] = s.nextInt();
}
for (int j = 0; j < arr.length j++) {
if (max < arr[j]) {
max= arr[j];
}
}
s.close();
System.out.println("제일큰수: "+max);
// p.207,208,209,210,218
//-객체배열만들기(1)
public class Book{
private String bookName;
private String author;

public Book() {}
public Book(String bookName, String author) {
this.bookName=bookName;
this.author=author;
}
public String getBookName() {
return bookName;
}
public void setBookName(String bookName) {
this.bookName=bookName;
}
public String getAuthor() {
return author;
}
public void setAuthor(String author) {
this.author=author;
}
public void showBookInfo() {
System.out.println(bookName+","+author);
}
}
//-객체배열만들기(2)
public class BookArray{
public static void main(String[] args) {
Book[] library=new Book[5];

for(int i=0; i<library.length; i++) {
System.out.println(library[i]);
}
}
}
//-객체배열만들기(3)
public class BookArray2{
public static void main(String[] args) {
Book[] library=new Book[5];

library[0]=new Book("태백산맥", "조정래");
library[1]=new Book("데미안", "헤르만헤세");
library[2]=new Book("어떻게살것인가", "유시민");
library[3]=new Book("토지", "박경리");
library[4]=new Book("어린왕자", "생택쥐페리");

for(int i=0; i<library.length; i++) {
library[i].showBookInfo();
}
for(int i=0; i<library.length; i++) {
System.out.println(library[i]);
}
}
}


//-향상된for문사용하기
public class EnhancedForLoop{
public static void main(String[] args) {
String[] strArray= {"Java", "Android", "C", "JavaScript", "Python"};
for(String lang:strArray) {
System.out.println(lang);
}
}
}
// p.260
//-다형성테스트하기
class Animal{
public void move() {
System.out.println("동물이움직입니다.");
}
}
class Human extends Animal{
public void move() {
System.out.println("사람이두발로걷습니다.");
}
}
class Tiger extends Animal{
public void move() {
System.out.println("호랑이가네발로뜁니다.");
}
}
class Eagle extends Animal{
public void move() {
System.out.println("독수리가하늘을납니다.");
}
}

public class AnimalTest1{
public static void main(String[] args) {
AnimalTest1 aTest=new AnimalTest1();
aTest.moveAnimal(new Human());
aTest.moveAnimal(new Tiger());
aTest.moveAnimal(new Eagle());
}
public void moveAnimal(Animal animal) {
animal.move();
}
}

// p.279 Q5

import java.util.ArrayList
class Shape{
public void draw() {
System.out.println("Shape");
}
}
calss Circle extens Shape{
public void draw() {
System.out.println("Circle");
}
}
class Triangle extends Shape{
public void draw() {
System.out.println("Triangle");
}
}
public class ShapeTest{
public static void main(String[] args) {
ArrayList<Shape> list=new ArrayList<Shape>();
list.add(new Circle());
list.add(new Triangle());
list.add(new Shape());

for(Shape s:list) {
System.out.println(s.draw());
}
}

}
// p.298~304
//-Player 클래스구현하기
public class Player{
private PlayerLevel level
public Player() {
level=newBeginnerLevel();
level.showLevelMessage();
}
public PlayerLevel getLevel() {
return level
}

public void upgradeLevel(PlayerLevel level) {
this.level=level
level.showLevelMessage();
}
public void play(int count) {
level.go(count);
}
}
//-PlayerLevel 추상클래스구현하기
public abstract class PlayerLevel{
public abstract void run();
public abstract void jump();
public abstract void turn();
public abstract void showLevelMessage();

final public void go(int count) {
run();
for(int i=0; i<count i++) {
jump();
}
turn();
}
}
//-초보자레벨클래스구현하기
public class BeginnerLevel extends PlayerLevel{
public void run() {
System.out.println("천천히달립니다.");
}

public void jump() {
System.out.println("Jump할줄모르지롱.");
}
public void turn() {
System.out.println("Turn할줄모르지롱.");
}
public void showLevelMessage() {
System.out.println("***** 초보자레벨입니다. *****");
}
}

//-중급자레벨클래스구현하기
public class AdvancedLevel extends PlayerLevel{
public void run() {
System.out.println("빨리달립니다.");
}
public void jump() {
System.out.println("높이jump합니다.");
}
public void turn() {
System.out.println("Turn할줄모르지롱.")
}
public void showLevelMessage() {
System.out.println("***** 중급자레벨입니다. *****");
}
}
//-고급자레벨클래스구현하기
public class SuperLevel extends PlayerLevel{
public void run() {
System.out.println("엄청빨리달립니다.");
}
public void jump() {
System.out.println("아주높이jump합니다.");
}
public void turn() {
System.out.println("한바퀴돕니다.");
}
public void showLevelMessage() {
System.out.println("***** 고급자레벨입니다. *****");
}
}
//-테스트프로그램실행하기
public class MainBoard{
public static void main(String[] args) {
Player player=new Player();
player.play(1);

AdvancedLevel aLevel=new AdvancedLevel();
player.upgradeLevel(aLevel);
player.play(2);

SuperLevel sLevel=new SuperLevel();
player.upgradeLevel(sLevel);
player.play(3);
}
}
// p.322~325
// -Scheduler 인터페이스정의하기
public interface Scheduler {
public void getNextCall();

public void sendCallToAgent();
}
// -순서대로배분하기

// 상담원한명씩돌아가며동일하게상담업무배분
public class RoundRobin implements Scheduler {
public void getNextCall(){
System.out.println("상담전화를순서대로대기열에서가져옵니다");

public void sendCallToAgent(){
System.out.println("다음순서상담원에게배분합니다.")
}
}
}

// -짧은대기열먼저배분하기

// 현재상담업무가없거나상담대기가가장적은상담원에게배분
public class LeastJob
implemenets Scheduler{

public void getNextCall(){
System.out.println("상담전화를순서대로대기열에서가져옵니다.");
}

// -우선순위에따라배분하기

// 고객등급이높은고객의전화부터대기열에서가져와업무능력이높은상담원우선배분
public class PriorityAllocation implements Scheduler {
public void getNextCall(){
System.out.println("고객등급이높은고객의전화를먼저가져옵니다.");
}

public void sendCallToAgend(){
System.out.println("업무skill 값이높은상담원에게우선적으로배분합니다.");
}
}

//-입력문자에따라배분정책수행하기

import java.io.IOException

public class SchedulerTest {
public static void main(String[] args) throws IOException {
System.out.println("전화상담할당방식을선택하세요.");
System.out.println("R : 한명씩차례로할당");
System.out.println("L : 쉬고있거나대기가가장적은상담원에게할당");
System.out.println("P : 우선순위가높은고객먼저할당");

int ch = System.in.read();
Scheduler scheduler = null
if (ch == 'R' || ch == 'r') {
scheduler = new RoundRobin();
} else if (ch == 'L' || ch == 'l') {
scheduler = new LeastJob();
} else if (ch == 'P' || ch == 'p') {
scheduler = new PriorityAllocation();
} else {
System.out.println("지원되지않는기능입니다.");
return
}
scheduler.getNextCall();
scheduler.sendCallToAgent();
}
}

// p.354,356-
//toString()메서드

// Object 클래스의toString()메서드사용하기
class Book {
int bookNumber;
String bookTitle;

Book(int bookNumber, String bookTitle) {
this.bookNumber = bookNumber;
this.bookTitle = bookTitle;
}
}

public class toStringEx {
public static void mainString[]args)
{
Book book1 = new Book(200, "개미");

System.out.println(boo1);
System.out.println(boo1.toString());
}

-toString()메서드재정의하기
class Book{
int bookNumber;
String bookTitle;
Book(int bookNumber, String bookTitle){
this.bookNumber=bookNumber;
this.bookTitle=bookTitle;
}

public String toString() {
return bookTitle+","+bookNumber;
}
}
public class ToStringEx{
public static void main(String[] args) {
Book book1=new Book(200,"개미");

System.out.println(book1);
System.out.println(book1.toString());
}
}
}

// p.506~507
//-사용자정의예외구현하기

public class IDFormatException extends Exception {
public IDFormatException(String message) {
super(message);
}
}

public class IDFormatTest {
private String userID;

public String getUserID() {
return userID;
}

public void setUserID(String userID) throws IDFormatException {
if (userID == null) {
throw new IDFormatException("아이디는null일수없습니다.");
} else if (userID.length() < 8 || userID.length() > 20) {
throw new IDFormatException("아이디는8자이상20자이하로쓰세요");
}
this.userID = userID;
}

public static void main(String[] args) {
IDFormatTest test = new IDFormatTest();

String userID = null

try {
test.setUserID(userID);
} catch (IDFormatException e) {
System.out.println(e.getMessage());
}

userID = "1234567"
try {
test.setUserID(userID);
} catch (IDFormatException e) {
System.out.println(e.getMessage());
}
}
}
// p.525,531,536,538,551
//-파일끝까지읽기
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException

public class FILEiNputStreamTest2{
public static void main(Stirng[] args) {
try(FileInputStream fis=new FileInputStream("input.txt")){
int i;
while((i=fis.read())!=-1) {
System.out.println((char)i);
}
System.out.println("end");
}
catch(FileNotFoundException e) {
e.printStackTrace();
}catch(IOException e) {
e.printStackTrace();
}
}
}
//-파일에바이트배열로출력하기
import java.io.FileOutputStream;
import java.io.IOException

public class FileOutputStreamTest2{
public static void main(String[] args) throws IOException{
FileOutputStream fos=new FileOutputStream("output2.txt",true);
try(fos){
byte[]bs = new byte[26];
byte data=65;
for(int i=0; i<bs.length; i++) {
bs[i]=data;
data++;
}
fos.write(bs);

}catch(IOException e) {
e.printStackTrace();
}
System.out.println("출력이완료되었습니다.");
}
}
//-FileReader로읽기
import java.io.FileReader;
import java.io.IOException

public class FileReaderTest {
public static void main(String[] args) {
try (FileReader fr = new FileReader("reader.txt")) {
int i;
while ((i = fr.read()) != -1) {
System.out.println((char) i);
}
} catch (IOException e) {
e.printStackTrace();
}
}
}

import java.io.FileWriter;
import java.io.IOException

public class FileWriterTest {
public static void main(String[] args) {
try (FileWriter fw = new FileWriter("writer.txt")) {
fw.write('A');
char buf[] = { 'B', 'C', 'D', 'E', 'F', 'G' };
fw.write(buf);
fw.write("안녕하세요. 잘써지네요");
fw.write(buf,1,2);
fw.write("65");
}catch(IOException e) {
e.printStackTrace();
}
System.out.println("출력이완료되었습니다.");
}
}
}
//-직렬화테스트하기

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

clsss Person{
private static final long seialVersionUID=-1503252402544036183L;
String name;
string job;

public Person() {}
public Person(String name, String job) {
this.name=name;
this.job=job;
}
public String toString() {
return name+","+job;
}
}
public class SerializationTest{
public static void mian(String[] args) throws ClassNotFoundException{
Person personAhn =new Person("안재용","대표이사");
Person personKim=new Person("김철수","상무이사");

try(FileOutputStream fos=new FileOutputStream("serial.out");
ObjectOutputStream oos=new ObjectOutputStream(fos)){
oos.writeObject(personAhn);
oos.writeObject(personKim);
}catch(IOException e) {
e.printStackTrace();
}
try(FileInputStream fis=new FileInputStream("serial.out");
ObjetInputStream ois=new ObjectInputStream(fis)){
Person p1=(Person)ois.readObject();
Person p2=(Person)ois.readObject();

System.out.pirntln(p1);
System.out.println(p2);

}catch(IOException e) {
e.printStackTrace();
}
}
}

}
}

